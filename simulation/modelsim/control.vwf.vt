// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/07/2017 01:59:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          control_unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module control_unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg button_in;
reg button_out;
reg [5:0] funct;
reg [5:0] opcode;
reg switchSide;
// wires                                               
wire [1:0] PCDest;
wire extSide;
wire [1:0] jumpOp;
wire memRead;
wire memWrite;
wire [1:0] outputControl;
wire regAlu;
wire [1:0] regDest;
wire regWrite;
wire [2:0] resultDest;
wire twoComplement;

// assign statements (if any)                          
control_unit i1 (
// port map - connection between master ports and signals/registers   
	.PCDest(PCDest),
	.button_in(button_in),
	.button_out(button_out),
	.extSide(extSide),
	.funct(funct),
	.jumpOp(jumpOp),
	.memRead(memRead),
	.memWrite(memWrite),
	.opcode(opcode),
	.outputControl(outputControl),
	.regAlu(regAlu),
	.regDest(regDest),
	.regWrite(regWrite),
	.resultDest(resultDest),
	.switchSide(switchSide),
	.twoComplement(twoComplement)
);
initial 
begin 
#4000000 $stop;
end 
// opcode[ 5 ]
initial
begin
	opcode[5] = 1'b0;
	opcode[5] = #3700000 1'b1;
	opcode[5] = #100000 1'b0;
end 
// opcode[ 4 ]
initial
begin
	opcode[4] = 1'b0;
	opcode[4] = #3700000 1'b1;
	opcode[4] = #100000 1'b0;
end 
// opcode[ 3 ]
initial
begin
	opcode[3] = 1'b0;
	opcode[3] = #2900000 1'b1;
	opcode[3] = #700000 1'b0;
	opcode[3] = #100000 1'b1;
	opcode[3] = #100000 1'b0;
end 
// opcode[ 2 ]
initial
begin
	opcode[2] = 1'b0;
	opcode[2] = #2500000 1'b1;
	opcode[2] = #400000 1'b0;
	opcode[2] = #400000 1'b1;
	opcode[2] = #300000 1'b0;
	opcode[2] = #100000 1'b1;
	opcode[2] = #100000 1'b0;
end 
// opcode[ 1 ]
initial
begin
	opcode[1] = 1'b0;
	opcode[1] = #2300000 1'b1;
	opcode[1] = #200000 1'b0;
	# 200000;
	repeat(2)
	begin
		opcode[1] = 1'b1;
		opcode[1] = #200000 1'b0;
		# 200000;
	end
	opcode[1] = 1'b1;
	opcode[1] = #100000 1'b0;
	opcode[1] = #100000 1'b1;
	opcode[1] = #100000 1'b0;
end 
// opcode[ 0 ]
initial
begin
	opcode[0] = 1'b0;
	# 2200000;
	repeat(6)
	begin
		opcode[0] = 1'b1;
		opcode[0] = #100000 1'b0;
		# 100000;
	end
	opcode[0] = 1'b1;
	opcode[0] = #100000 1'b0;
	opcode[0] = #200000 1'b1;
	opcode[0] = #100000 1'b0;
end 
// funct[ 5 ]
initial
begin
	funct[5] = 1'b0;
end 
// funct[ 4 ]
initial
begin
	funct[4] = 1'b0;
	funct[4] = #1600000 1'b1;
	funct[4] = #600000 1'b0;
end 
// funct[ 3 ]
initial
begin
	funct[3] = 1'b0;
	funct[3] = #800000 1'b1;
	funct[3] = #800000 1'b0;
end 
// funct[ 2 ]
initial
begin
	repeat(2)
	begin
		funct[2] = 1'b0;
		funct[2] = #400000 1'b1;
		# 400000;
	end
	funct[2] = 1'b0;
	funct[2] = #400000 1'b1;
	funct[2] = #200000 1'b0;
end 
// funct[ 1 ]
initial
begin
	repeat(5)
	begin
		funct[1] = 1'b0;
		funct[1] = #200000 1'b1;
		# 200000;
	end
	funct[1] = 1'b0;
end 
// funct[ 0 ]
initial
begin
	repeat(11)
	begin
		funct[0] = 1'b0;
		funct[0] = #100000 1'b1;
		# 100000;
	end
	funct[0] = 1'b0;
end 

// button_in
initial
begin
	button_in = 1'b0;
end 

// button_out
initial
begin
	button_out = 1'b0;
end 

// switchSide
initial
begin
	switchSide = 1'b0;
end 
endmodule

