/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2016  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel MegaCore Function License Agreement, or other 
applicable license agreement, including, without limitation, 
that your use is for the sole purpose of programming logic 
devices manufactured by Intel and sold by Intel or its 
authorized distributors.  Please refer to the applicable 
agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 4000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("PCDest")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("PCDest[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "PCDest";
}

SIGNAL("PCDest[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "PCDest";
}

SIGNAL("button_in")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("button_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("extSide")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("funct")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 6;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("funct[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "funct";
}

SIGNAL("funct[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "funct";
}

SIGNAL("funct[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "funct";
}

SIGNAL("funct[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "funct";
}

SIGNAL("funct[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "funct";
}

SIGNAL("funct[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "funct";
}

SIGNAL("jumpOp")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("jumpOp[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "jumpOp";
}

SIGNAL("jumpOp[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "jumpOp";
}

SIGNAL("memRead")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("memWrite")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("opcode")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 6;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("opcode[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "opcode";
}

SIGNAL("opcode[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "opcode";
}

SIGNAL("opcode[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "opcode";
}

SIGNAL("opcode[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "opcode";
}

SIGNAL("opcode[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "opcode";
}

SIGNAL("opcode[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "opcode";
}

SIGNAL("outputControl")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("outputControl[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "outputControl";
}

SIGNAL("outputControl[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "outputControl";
}

SIGNAL("regAlu")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("regDest")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("regDest[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "regDest";
}

SIGNAL("regDest[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "regDest";
}

SIGNAL("regWrite")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("resultDest")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("resultDest[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "resultDest";
}

SIGNAL("resultDest[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "resultDest";
}

SIGNAL("resultDest[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "resultDest";
}

SIGNAL("switchSide")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("twoComplement")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("PCDest[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2000.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
		}
	}
}

TRANSITION_LIST("PCDest[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2000.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
	}
}

TRANSITION_LIST("button_in")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3050.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 900.0;
		}
	}
}

TRANSITION_LIST("button_out")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3150.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 800.0;
		}
	}
}

TRANSITION_LIST("extSide")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2700.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 1200.0;
		}
	}
}

TRANSITION_LIST("funct[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4000.0;
		}
	}
}

TRANSITION_LIST("funct[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 1600.0;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 1800.0;
		}
	}
}

TRANSITION_LIST("funct[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 2400.0;
		}
	}
}

TRANSITION_LIST("funct[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1800.0;
		}
	}
}

TRANSITION_LIST("funct[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 2000.0;
		}
	}
}

TRANSITION_LIST("funct[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 1800.0;
		}
	}
}

TRANSITION_LIST("jumpOp[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2000.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
		}
	}
}

TRANSITION_LIST("jumpOp[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2000.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 600.0;
		}
	}
}

TRANSITION_LIST("memRead")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 1700.0;
		}
	}
}

TRANSITION_LIST("memWrite")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2300.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 1600.0;
		}
	}
}

TRANSITION_LIST("opcode[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3700.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
	}
}

TRANSITION_LIST("opcode[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3700.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
	}
}

TRANSITION_LIST("opcode[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2900.0;
			LEVEL 1 FOR 700.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
	}
}

TRANSITION_LIST("opcode[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 300.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
	}
}

TRANSITION_LIST("opcode[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2300.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
	}
}

TRANSITION_LIST("opcode[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
	}
}

TRANSITION_LIST("outputControl[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 800.0;
		}
	}
}

TRANSITION_LIST("outputControl[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3000.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 900.0;
		}
	}
}

TRANSITION_LIST("regAlu")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2200.0;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 1200.0;
		}
	}
}

TRANSITION_LIST("regDest[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2000.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1100.0;
			LEVEL 1 FOR 300.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
	}
}

TRANSITION_LIST("regDest[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 500.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 300.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 300.0;
			LEVEL 0 FOR 2000.0;
		}
	}
}

TRANSITION_LIST("regWrite")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 2000.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
		}
	}
}

TRANSITION_LIST("resultDest[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2000.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1100.0;
			LEVEL 1 FOR 300.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
		}
	}
}

TRANSITION_LIST("resultDest[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 700.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 900.0;
		}
	}
}

TRANSITION_LIST("resultDest[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2600.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 900.0;
		}
	}
}

TRANSITION_LIST("switchSide")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4000.0;
		}
	}
}

TRANSITION_LIST("twoComplement")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 2200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 1600.0;
		}
	}
}

DISPLAY_LINE
{
	CHANNEL = "opcode";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4, 5, 6;
}

DISPLAY_LINE
{
	CHANNEL = "opcode[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "opcode[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "opcode[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "opcode[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "opcode[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "opcode[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "funct";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 0;
	CHILDREN = 8, 9, 10, 11, 12, 13;
}

DISPLAY_LINE
{
	CHANNEL = "funct[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "funct[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "funct[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "funct[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "funct[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "funct[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "button_in";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "button_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "switchSide";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "regDest";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 0;
	CHILDREN = 18, 19;
}

DISPLAY_LINE
{
	CHANNEL = "regDest[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "regDest[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "regWrite";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "extSide";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "twoComplement";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "regAlu";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "memWrite";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "memRead";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "jumpOp";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 26;
	TREE_LEVEL = 0;
	CHILDREN = 27, 28;
}

DISPLAY_LINE
{
	CHANNEL = "jumpOp[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 26;
}

DISPLAY_LINE
{
	CHANNEL = "jumpOp[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 26;
}

DISPLAY_LINE
{
	CHANNEL = "PCDest";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 29;
	TREE_LEVEL = 0;
	CHILDREN = 30, 31;
}

DISPLAY_LINE
{
	CHANNEL = "PCDest[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 29;
}

DISPLAY_LINE
{
	CHANNEL = "PCDest[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 31;
	TREE_LEVEL = 1;
	PARENT = 29;
}

DISPLAY_LINE
{
	CHANNEL = "outputControl";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 32;
	TREE_LEVEL = 0;
	CHILDREN = 33, 34;
}

DISPLAY_LINE
{
	CHANNEL = "outputControl[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 32;
}

DISPLAY_LINE
{
	CHANNEL = "outputControl[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 32;
}

DISPLAY_LINE
{
	CHANNEL = "resultDest";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 35;
	TREE_LEVEL = 0;
	CHILDREN = 36, 37, 38;
}

DISPLAY_LINE
{
	CHANNEL = "resultDest[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 36;
	TREE_LEVEL = 1;
	PARENT = 35;
}

DISPLAY_LINE
{
	CHANNEL = "resultDest[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 37;
	TREE_LEVEL = 1;
	PARENT = 35;
}

DISPLAY_LINE
{
	CHANNEL = "resultDest[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 38;
	TREE_LEVEL = 1;
	PARENT = 35;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
