// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/10/2018 16:46:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          interruptor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module interruptor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] PCout;
reg clk;
reg [31:0] inst_mem;
reg reset;
// wires                                               
wire [31:0] inst_out;
wire intr;

// assign statements (if any)                          
interruptor i1 (
// port map - connection between master ports and signals/registers   
	.PCout(PCout),
	.clk(clk),
	.inst_mem(inst_mem),
	.inst_out(inst_out),
	.intr(intr),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 
// PCout[ 31 ]
initial
begin
	PCout[31] = 1'b0;
end 
// PCout[ 30 ]
initial
begin
	PCout[30] = 1'b0;
end 
// PCout[ 29 ]
initial
begin
	PCout[29] = 1'b0;
end 
// PCout[ 28 ]
initial
begin
	PCout[28] = 1'b0;
end 
// PCout[ 27 ]
initial
begin
	PCout[27] = 1'b0;
end 
// PCout[ 26 ]
initial
begin
	PCout[26] = 1'b0;
end 
// PCout[ 25 ]
initial
begin
	PCout[25] = 1'b0;
end 
// PCout[ 24 ]
initial
begin
	PCout[24] = 1'b0;
end 
// PCout[ 23 ]
initial
begin
	PCout[23] = 1'b0;
end 
// PCout[ 22 ]
initial
begin
	PCout[22] = 1'b0;
end 
// PCout[ 21 ]
initial
begin
	PCout[21] = 1'b0;
end 
// PCout[ 20 ]
initial
begin
	PCout[20] = 1'b0;
end 
// PCout[ 19 ]
initial
begin
	PCout[19] = 1'b0;
end 
// PCout[ 18 ]
initial
begin
	PCout[18] = 1'b0;
end 
// PCout[ 17 ]
initial
begin
	PCout[17] = 1'b0;
end 
// PCout[ 16 ]
initial
begin
	PCout[16] = 1'b0;
end 
// PCout[ 15 ]
initial
begin
	PCout[15] = 1'b0;
end 
// PCout[ 14 ]
initial
begin
	PCout[14] = 1'b0;
end 
// PCout[ 13 ]
initial
begin
	PCout[13] = 1'b0;
end 
// PCout[ 12 ]
initial
begin
	PCout[12] = 1'b0;
end 
// PCout[ 11 ]
initial
begin
	PCout[11] = 1'b0;
end 
// PCout[ 10 ]
initial
begin
	PCout[10] = 1'b0;
end 
// PCout[ 9 ]
initial
begin
	PCout[9] = 1'b0;
end 
// PCout[ 8 ]
initial
begin
	PCout[8] = 1'b0;
end 
// PCout[ 7 ]
initial
begin
	PCout[7] = 1'b0;
end 
// PCout[ 6 ]
initial
begin
	PCout[6] = 1'b0;
end 
// PCout[ 5 ]
initial
begin
	PCout[5] = 1'b0;
	PCout[5] = #640000 1'b1;
end 
// PCout[ 4 ]
initial
begin
	PCout[4] = 1'b0;
	PCout[4] = #320000 1'b1;
	PCout[4] = #320000 1'b0;
	PCout[4] = #320000 1'b1;
end 
// PCout[ 3 ]
initial
begin
	PCout[3] = 1'b0;
	PCout[3] = #160000 1'b1;
	# 160000;
	repeat(2)
	begin
		PCout[3] = 1'b0;
		PCout[3] = #160000 1'b1;
		# 160000;
	end
	PCout[3] = 1'b0;
end 
// PCout[ 2 ]
initial
begin
	PCout[2] = 1'b0;
	PCout[2] = #80000 1'b1;
	PCout[2] = #80000 1'b0;
	PCout[2] = #80000 1'b1;
	# 80000;
	repeat(4)
	begin
		PCout[2] = 1'b0;
		PCout[2] = #80000 1'b1;
		# 80000;
	end
	PCout[2] = 1'b0;
end 
// PCout[ 1 ]
initial
begin
	PCout[1] = 1'b0;
	PCout[1] = #40000 1'b1;
	PCout[1] = #40000 1'b0;
	PCout[1] = #40000 1'b1;
	PCout[1] = #40000 1'b0;
	PCout[1] = #40000 1'b1;
	# 40000;
	repeat(9)
	begin
		PCout[1] = 1'b0;
		PCout[1] = #40000 1'b1;
		# 40000;
	end
	PCout[1] = 1'b0;
end 
// PCout[ 0 ]
initial
begin
	repeat(3)
	begin
		PCout[0] = 1'b0;
		PCout[0] = #20000 1'b1;
		# 20000;
	end
	PCout[0] = 1'b0;
	PCout[0] = #20000 1'b1;
	# 20000;
	repeat(21)
	begin
		PCout[0] = 1'b0;
		PCout[0] = #20000 1'b1;
		# 20000;
	end
end 

// clk
initial
begin
	clk = 1'b1;
	# 10000;
	repeat(49)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 
// inst_mem[ 31 ]
initial
begin
	inst_mem[31] = 1'b0;
	inst_mem[31] = #120000 1'b1;
	inst_mem[31] = #20000 1'b0;
end 
// inst_mem[ 30 ]
initial
begin
	inst_mem[30] = 1'b0;
end 
// inst_mem[ 29 ]
initial
begin
	inst_mem[29] = 1'b0;
	inst_mem[29] = #120000 1'b1;
	inst_mem[29] = #20000 1'b0;
end 
// inst_mem[ 28 ]
initial
begin
	inst_mem[28] = 1'b0;
end 
// inst_mem[ 27 ]
initial
begin
	inst_mem[27] = 1'b0;
	inst_mem[27] = #120000 1'b1;
	inst_mem[27] = #20000 1'b0;
end 
// inst_mem[ 26 ]
initial
begin
	inst_mem[26] = 1'b0;
end 
// inst_mem[ 25 ]
initial
begin
	inst_mem[25] = 1'b0;
end 
// inst_mem[ 24 ]
initial
begin
	inst_mem[24] = 1'b0;
end 
// inst_mem[ 23 ]
initial
begin
	inst_mem[23] = 1'b0;
end 
// inst_mem[ 22 ]
initial
begin
	inst_mem[22] = 1'b0;
end 
// inst_mem[ 21 ]
initial
begin
	inst_mem[21] = 1'b0;
end 
// inst_mem[ 20 ]
initial
begin
	inst_mem[20] = 1'b0;
end 
// inst_mem[ 19 ]
initial
begin
	inst_mem[19] = 1'b0;
end 
// inst_mem[ 18 ]
initial
begin
	inst_mem[18] = 1'b0;
end 
// inst_mem[ 17 ]
initial
begin
	inst_mem[17] = 1'b0;
end 
// inst_mem[ 16 ]
initial
begin
	inst_mem[16] = 1'b0;
end 
// inst_mem[ 15 ]
initial
begin
	inst_mem[15] = 1'b0;
end 
// inst_mem[ 14 ]
initial
begin
	inst_mem[14] = 1'b0;
end 
// inst_mem[ 13 ]
initial
begin
	inst_mem[13] = 1'b0;
end 
// inst_mem[ 12 ]
initial
begin
	inst_mem[12] = 1'b0;
end 
// inst_mem[ 11 ]
initial
begin
	inst_mem[11] = 1'b0;
end 
// inst_mem[ 10 ]
initial
begin
	inst_mem[10] = 1'b0;
end 
// inst_mem[ 9 ]
initial
begin
	inst_mem[9] = 1'b0;
end 
// inst_mem[ 8 ]
initial
begin
	inst_mem[8] = 1'b0;
end 
// inst_mem[ 7 ]
initial
begin
	inst_mem[7] = 1'b0;
end 
// inst_mem[ 6 ]
initial
begin
	inst_mem[6] = 1'b0;
end 
// inst_mem[ 5 ]
initial
begin
	inst_mem[5] = 1'b0;
	inst_mem[5] = #640000 1'b1;
end 
// inst_mem[ 4 ]
initial
begin
	inst_mem[4] = 1'b0;
	inst_mem[4] = #320000 1'b1;
	inst_mem[4] = #320000 1'b0;
	inst_mem[4] = #320000 1'b1;
end 
// inst_mem[ 3 ]
initial
begin
	inst_mem[3] = 1'b0;
	inst_mem[3] = #160000 1'b1;
	# 160000;
	repeat(2)
	begin
		inst_mem[3] = 1'b0;
		inst_mem[3] = #160000 1'b1;
		# 160000;
	end
	inst_mem[3] = 1'b0;
end 
// inst_mem[ 2 ]
initial
begin
	inst_mem[2] = 1'b0;
	inst_mem[2] = #80000 1'b1;
	inst_mem[2] = #40000 1'b0;
	inst_mem[2] = #20000 1'b1;
	inst_mem[2] = #20000 1'b0;
	inst_mem[2] = #80000 1'b1;
	# 80000;
	repeat(4)
	begin
		inst_mem[2] = 1'b0;
		inst_mem[2] = #80000 1'b1;
		# 80000;
	end
	inst_mem[2] = 1'b0;
end 
// inst_mem[ 1 ]
initial
begin
	inst_mem[1] = 1'b0;
	inst_mem[1] = #40000 1'b1;
	inst_mem[1] = #40000 1'b0;
	inst_mem[1] = #60000 1'b1;
	inst_mem[1] = #20000 1'b0;
	inst_mem[1] = #40000 1'b1;
	# 40000;
	repeat(9)
	begin
		inst_mem[1] = 1'b0;
		inst_mem[1] = #40000 1'b1;
		# 40000;
	end
	inst_mem[1] = 1'b0;
end 
// inst_mem[ 0 ]
initial
begin
	repeat(3)
	begin
		inst_mem[0] = 1'b0;
		inst_mem[0] = #20000 1'b1;
		# 20000;
	end
	inst_mem[0] = 1'b0;
	inst_mem[0] = #20000 1'b1;
	# 20000;
	repeat(21)
	begin
		inst_mem[0] = 1'b0;
		inst_mem[0] = #20000 1'b1;
		# 20000;
	end
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 
endmodule

