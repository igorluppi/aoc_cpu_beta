// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/07/2017 11:07:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          out_module_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module out_module_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] in;
reg [1:0] outputControl;
reg [31:0] regs;
// wires                                               
wire [31:0] binary;
wire turnOff;

// assign statements (if any)                          
out_module_control i1 (
// port map - connection between master ports and signals/registers   
	.binary(binary),
	.in(in),
	.outputControl(outputControl),
	.regs(regs),
	.turnOff(turnOff)
);
initial 
begin 
#1000000 $finish;
end 
// in[ 31 ]
initial
begin
	in[31] = 1'b0;
end 
// in[ 30 ]
initial
begin
	in[30] = 1'b0;
end 
// in[ 29 ]
initial
begin
	in[29] = 1'b0;
end 
// in[ 28 ]
initial
begin
	in[28] = 1'b0;
end 
// in[ 27 ]
initial
begin
	in[27] = 1'b0;
end 
// in[ 26 ]
initial
begin
	in[26] = 1'b0;
end 
// in[ 25 ]
initial
begin
	in[25] = 1'b0;
end 
// in[ 24 ]
initial
begin
	in[24] = 1'b0;
end 
// in[ 23 ]
initial
begin
	in[23] = 1'b0;
end 
// in[ 22 ]
initial
begin
	in[22] = 1'b0;
end 
// in[ 21 ]
initial
begin
	in[21] = 1'b0;
end 
// in[ 20 ]
initial
begin
	in[20] = 1'b0;
end 
// in[ 19 ]
initial
begin
	in[19] = 1'b0;
end 
// in[ 18 ]
initial
begin
	in[18] = 1'b0;
end 
// in[ 17 ]
initial
begin
	in[17] = 1'b0;
end 
// in[ 16 ]
initial
begin
	in[16] = 1'b0;
end 
// in[ 15 ]
initial
begin
	in[15] = 1'b0;
end 
// in[ 14 ]
initial
begin
	in[14] = 1'b0;
end 
// in[ 13 ]
initial
begin
	in[13] = 1'b0;
end 
// in[ 12 ]
initial
begin
	in[12] = 1'b0;
end 
// in[ 11 ]
initial
begin
	in[11] = 1'b0;
end 
// in[ 10 ]
initial
begin
	in[10] = 1'b0;
end 
// in[ 9 ]
initial
begin
	in[9] = 1'b0;
end 
// in[ 8 ]
initial
begin
	in[8] = 1'b0;
end 
// in[ 7 ]
initial
begin
	in[7] = 1'b0;
end 
// in[ 6 ]
initial
begin
	in[6] = 1'b0;
end 
// in[ 5 ]
initial
begin
	in[5] = 1'b0;
end 
// in[ 4 ]
initial
begin
	in[4] = 1'b0;
end 
// in[ 3 ]
initial
begin
	in[3] = 1'b0;
end 
// in[ 2 ]
initial
begin
	in[2] = 1'b0;
end 
// in[ 1 ]
initial
begin
	in[1] = 1'b0;
end 
// in[ 0 ]
initial
begin
	in[0] = 1'b1;
end 
// regs[ 31 ]
initial
begin
	regs[31] = 1'b0;
end 
// regs[ 30 ]
initial
begin
	regs[30] = 1'b0;
end 
// regs[ 29 ]
initial
begin
	regs[29] = 1'b0;
end 
// regs[ 28 ]
initial
begin
	regs[28] = 1'b0;
end 
// regs[ 27 ]
initial
begin
	regs[27] = 1'b0;
end 
// regs[ 26 ]
initial
begin
	regs[26] = 1'b0;
end 
// regs[ 25 ]
initial
begin
	regs[25] = 1'b0;
end 
// regs[ 24 ]
initial
begin
	regs[24] = 1'b0;
end 
// regs[ 23 ]
initial
begin
	regs[23] = 1'b0;
end 
// regs[ 22 ]
initial
begin
	regs[22] = 1'b0;
end 
// regs[ 21 ]
initial
begin
	regs[21] = 1'b0;
end 
// regs[ 20 ]
initial
begin
	regs[20] = 1'b0;
end 
// regs[ 19 ]
initial
begin
	regs[19] = 1'b0;
end 
// regs[ 18 ]
initial
begin
	regs[18] = 1'b0;
end 
// regs[ 17 ]
initial
begin
	regs[17] = 1'b0;
end 
// regs[ 16 ]
initial
begin
	regs[16] = 1'b0;
end 
// regs[ 15 ]
initial
begin
	regs[15] = 1'b0;
end 
// regs[ 14 ]
initial
begin
	regs[14] = 1'b0;
end 
// regs[ 13 ]
initial
begin
	regs[13] = 1'b0;
end 
// regs[ 12 ]
initial
begin
	regs[12] = 1'b0;
end 
// regs[ 11 ]
initial
begin
	regs[11] = 1'b0;
end 
// regs[ 10 ]
initial
begin
	regs[10] = 1'b0;
end 
// regs[ 9 ]
initial
begin
	regs[9] = 1'b0;
end 
// regs[ 8 ]
initial
begin
	regs[8] = 1'b0;
end 
// regs[ 7 ]
initial
begin
	regs[7] = 1'b0;
end 
// regs[ 6 ]
initial
begin
	regs[6] = 1'b0;
end 
// regs[ 5 ]
initial
begin
	regs[5] = 1'b0;
end 
// regs[ 4 ]
initial
begin
	regs[4] = 1'b0;
end 
// regs[ 3 ]
initial
begin
	regs[3] = 1'b0;
end 
// regs[ 2 ]
initial
begin
	regs[2] = 1'b0;
end 
// regs[ 1 ]
initial
begin
	regs[1] = 1'b1;
end 
// regs[ 0 ]
initial
begin
	regs[0] = 1'b0;
end 
// outputControl[ 1 ]
always
begin
	outputControl[1] = 1'b0;
	outputControl[1] = #500000 1'b1;
	#500000;
end 
// outputControl[ 0 ]
always
begin
	outputControl[0] = 1'b0;
	outputControl[0] = #250000 1'b1;
	#250000;
end 
endmodule

