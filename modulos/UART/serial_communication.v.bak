
//=======================================================
//  This code is generated by Thanos
//=======================================================

module serial_communication(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	
	//////////// LED //////////
	output	reg     [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// GPIO, GPIO connect to RFS - RF and Sensor //////////
	input 		          		BT_UART_RX,
	output		          		BT_UART_TX,
	
	//////////// CONTROL //////////
	input                      flag
	
);




//=======================================================
//  REG/WIRE declarations
//=======================================================

assign  BT_UART_TX = txd;
assign  rxd  = BT_UART_RX;
assign  uart_data = uart_data_read;
assign  uart_data_write = uart_data;


wire 				rts; // request to send		  
wire 				cts; // clear to send
wire 				rxd;
wire 				txd;
wire	 [7:0]   uart_data;
wire	 [7:0]   uart_data_read;
wire	 [7:0]   uart_data_write;
wire	         rdempty;
wire	         write;
wire           data_available;
reg	     	   read;
reg	         cnt;
//=======================================================
//  Structural coding
//=======================================================

// UART Controller
uart_control UART0(

	.clk(CLOCK_50),
	.reset_n(KEY[0]),
	// tx
	.write(write),
	.writedata(uart_data_write),

	// rx
	.read(read),
	.readdata(uart_data_read),
	.rdempty(rdempty),
	//
	.uart_clk_25m(cnt),
	.uart_tx(txd),
	.uart_rx(rxd)
	
);	

//read
always@(posedge CLOCK_50)
begin
  if (~rdempty)
		read <= 1;
  else
		read <= 0;
end

assign  data_available = (read & (~rdempty));
assign  write = (read & (~rdempty));

always@(posedge CLOCK_50 or negedge KEY[0])
begin
  if(!KEY[0])
    LEDR[15:0] <= 0;
  else if(KEY[0] & data_available)
  begin
    
	 LEDR[15:8] <= 0;
	 LEDR[7:0]  <= uart_data;
	 
  end
  else
    LEDR[15:0] <= LEDR[15:0];
	 
	 
    
end

always@(posedge CLOCK_50) 
begin
	cnt <= cnt + 1;
end

always@(*) 
begin
   LEDR[16] = flag; 
end


endmodule
